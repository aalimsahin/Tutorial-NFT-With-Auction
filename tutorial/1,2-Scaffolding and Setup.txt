In this tutorial, we’ll be building a version of NFT Auction!
There will be creator who owns Nft and starts the auction, and two people who bid on the auction.
We’ll start simple and slowly make the application more fully-featured.

You should follow along by copying each part of the program and seeing how things go.
If you’re like us, you may find it beneficial to type each line out, rather than copying & pasting so you can start building your muscle memory and begin to get a sense for each part of a Reach program.

Let’s start by creating a file named index.rsh.
It doesn’t matter where you put this file, but we recommend putting in the current directory, which would be ~/reach/nftauction if you’re following along exactly.
In all the subsequent code samples, we’ll label the files based on the chapter of the tutorial you’re reading.
For example, start off by typing the following into index.rsh:
$[tut1=>index.rsh]

This is just a shell of a program that doesn’t do much, but it has a few important components.

Line 1 indicates that this is a Reach program. You’ll always have this at the top of every program.
Line 3 defines the main export from the program. When you compile, this is what the compiler will look at.
Line 6 specifies the two group participants to this application, One of them is Creator. We specify it with "participant" because it is a single person.
    Since bidders are more than one, we specify it with "Participantclass".
Line 7 binds Reach identifiers (Creator and Bidder) to these participants and defines the body of the program.


Before we go too much further, let’s create a similar shell for our JavaScript frontend code. Open a new file named index.mjs and fill it with this:
$[tut1=>index.mjs]

This JavaScript code is similarly schematic and will be consistent across all of your test programs.

Line 1 imports the Reach standard library loader.
Line 2 imports your backend, which ./reach compile will produce.
Line 4 defines an asynchronous function that will be the body of our frontend.
Line 5 loads the standard library dynamically based on the REACH_CONNECTOR_MODE environment variable.
Line 6 defines a quantity of network tokens as the starting balance for each test account.
Lines 8, 9 and 10 create test accounts with initial endowments for Creator, Alice and Bob. This will only work on the Reach-provided developer testing network.
Line 12 has Creator deploy the application.
Line 13 and 14 have Alice and Bob attach to it.
Lines 17 through 20 initialize a backend for Creator.
Lines 21 through 24 initialize a backend for Alice.
Lines 25 through 28 initialize a backend for Bob.
Line 16 waits for the backends to complete.
Line 30 calls this asynchronous function that we’ve defined.


This is now enough for Reach to compile and run our program. Let’s try by running

  $ ./reach run

Reach should now build and launch a Docker container for this application.
Since the application doesn’t do anything, you’ll just see a lot of diagnostic messages though, so that’s not very exciting.